/* This is an example of an SQL "Windows Function" used to solve an uncommon SQL problem. 
For this example I used bike lane data for a city to complete this task */

/* Provide a list of all the bike lanes, both safety ratings for each lane, 
the average safety rating for each lane, and a label with the recommendation as "Remove", "Leave As-Is", 
or "Improvements Needed". Bike lanes with an average safety rating of 4 or more should be labeled "Leave As-Is". 
Bike lanes with an average safety rating of less than 2.5 should be labeled as "Remove". 
All other bike lanes should be labeled as "Improvements Needed" */ 

-- Here's a sample of the data:
id,year_installed,year_updated,street,width_feet,safetyrating,protected
1,2012,2020,Chestnut,4,4,yes
2,2016,2020,Walnut,4,3.8,yes
3,2011,2020,Market,3.5,2,no
4,2008,2020,Locust,4,5,yes
5,2002,2020,South,4.5,4.3,no
6,2012,2021,18th,4,4.7,yes
7,2016,2021,2nd,4,3.7,yes
8,2011,2021,Lombard,3.5,2.2,no
9,2008,2021,Pine,4,4.9,yes
10,2002,2021,Tasker,4.5,4.8,no

--Here is the query using Windows function to complete the task:
SELECT street, safetyrating, avg(safetyrating) OVER (PARTITION BY street) AS 'Avg_Safety_Rating', 
    CASE
        WHEN avg(safetyrating) OVER (PARTITION BY street) >= 4 THEN 'Leave As-Is'
        WHEN avg(safetyrating) OVER (PARTITION BY street) < 2.5 THEN 'Remove'
        ELSE 'Improvements Needed' END AS 'Tag'
FROM CityBikeLanes
ORDER BY street ASC;

